{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bedder - simple, flexible intersections","text":""},{"location":"#commands","title":"Commands","text":"<p><code>bedder</code> is organized into subcommands for easier usage:</p> <pre><code>bedder v0.1.6\n\nUsage: bedder &lt;COMMAND&gt;\n\nCommands:\n  full       Full functionality with all options (almost never use this)\n  intersect  Intersection mode - hides closest options\n  closest    Closest mode - hides overlap requirements\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n</code></pre>"},{"location":"#subcommands","title":"Subcommands","text":"<ul> <li><code>bedder intersect</code> - For finding overlaps between intervals. This is the most commonly used mode and hides closest-related options for simplicity.</li> <li><code>bedder closest</code> - For finding the nearest intervals. This mode hides overlap requirement options.</li> <li><code>bedder full</code> - Contains all options from both intersect and closest modes. Use this only when you need access to all features simultaneously.</li> </ul>"},{"location":"#common-options-for-all-subcommands","title":"Common Options (for all subcommands)","text":"<p>All subcommands share common options:</p> <ul> <li><code>-a &lt;QUERY_PATH&gt;</code> - input file</li> <li><code>-b &lt;OTHER_PATHS&gt;</code> - other file</li> <li><code>-g, --genome &lt;GENOME_FILE&gt;</code> - genome file for chromosome ordering</li> <li><code>-c, --columns &lt;COLUMNS&gt;</code> - columns to output (format: name:type:description:number:value_parser)</li> <li><code>-o, --output &lt;OUTPUT_PATH&gt;</code> - output file (default: stdout)</li> <li><code>-p, --a-piece &lt;A_PIECE&gt;</code> - the piece of the a intervals to report [default: whole] [possible values: none, piece, whole, inverse]</li> <li><code>-P, --b-piece &lt;B_PIECE&gt;</code> - the piece of the b intervals to report [default: whole] [possible values: none, piece, whole, inverse]</li> <li><code>--python &lt;PYTHON_FILE&gt;</code> - python file with functions to be used in columns</li> <li><code>-f, --filter &lt;FILTER&gt;</code> - optional filter expression (Python boolean expression; 'r' and 'fragment' are the current report fragment) indicates if the fragment should be included in the output</li> </ul>"},{"location":"#intersect-specific-options","title":"Intersect-specific Options","text":"<ul> <li><code>-m, --a-mode &lt;INTERSECTION_MODE&gt;</code> - intersection mode for a-file [default: default] [possible values: default, not, piece]</li> <li><code>-M, --b-mode &lt;B_MODE&gt;</code> - intersection mode for b-file [default: default] [possible values: default, not, piece]</li> <li><code>-r, --a-requirements &lt;A_REQUIREMENTS&gt;</code> - a-requirements for overlap (float &lt; 1, percentage, or integer for bases)</li> <li><code>-R, --b-requirements &lt;B_REQUIREMENTS&gt;</code> - b-requirements for overlap (float &lt; 1, percentage, or integer for bases)</li> </ul>"},{"location":"#closest-specific-options","title":"Closest-specific Options","text":"<ul> <li><code>-n, --n-closest &lt;N_CLOSEST&gt;</code> - report the n-closest intervals</li> <li><code>-d, --max-distance &lt;MAX_DISTANCE&gt;</code> - maximum distance to search for closest intervals</li> </ul>"},{"location":"#logging","title":"Logging","text":"<p><code>bedder</code> has logging for debugging and tracing. The default is to only show warnings. If interested in more granular (verbose) output, set an environment variable:</p> <pre><code>export RUST_LOG=info\n</code></pre> <p>sometimes this can be helpful if <code>bedder</code> isn't behaving how you expect.</p>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"example/","title":"Example","text":"add numbers<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"installation/","title":"Installation of bedder","text":""},{"location":"installation/#binary-options","title":"Binary options","text":"<ul> <li>bedder-static-linux-x86_64: Static binary for Linux x86_64</li> <li>bedder-static-macos-x86_64: Mostly static binary for macOS x86_64</li> </ul>"},{"location":"installation/#linux-installation","title":"Linux Installation","text":"<pre><code># Download Linux binary and make it executable\nwget https://github.com/quinlan-lab/bedder-rs/releases/download/v0.1.6/bedder-static-linux-x86_64\nchmod +x bedder-static-linux-x86_64\n\n# Check whether install was successful\n./bedder-static-linux-x86_64\n</code></pre> <p>If installation is successful, running the command \"bedder\" should display the subcommand help:</p> <pre><code>bedder v0.1.6\n\nUsage: bedder &lt;COMMAND&gt;\n\nCommands:\n  full       Full functionality with all options (almost never use this)\n  intersect  Intersection mode - hides closest options\n  closest    Closest mode - hides overlap requirements\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n</code></pre>"},{"location":"installation/#linux-troubleshoot","title":"Linux troubleshoot","text":"<p>If installation is unsuccessful, consider:</p>"},{"location":"installation/#reinstalling-in-a-python-virtual-environment","title":"Reinstalling in a python virtual environment","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\nwget https://github.com/quinlan-lab/bedder-rs/releases/download/v0.1.6/bedder-static-linux-x86_64\nchmod +x bedder-static-linux-x86_64\n</code></pre>"},{"location":"installation/#calling-the-command-from-the-current-directory","title":"Calling the command from the current directory","text":"<pre><code>./bedder-static-linux-x86_64\n</code></pre>"},{"location":"installation/#relocating-the-binary-to-path","title":"Relocating the binary to $PATH","text":"<p>This may be necessary if above check fails or if you are hoping to install the linux binary in a particular location distinct from the default.</p> <pre><code># To determine what $PATH are available: \necho \"$PATH\"\n# Move to $PATH\nsudo mv bedder-static-linux-x86_64 /usr/local/bin/bedder\n</code></pre>"},{"location":"installation/#macos-installation","title":"macOS Installation","text":"<pre><code># Download Mac binary and make executable\nwget https://github.com/quinlan-lab/bedder-rs/releases/download/v0.1.6/bedder-static-macos-x86_64\nchmod +x bedder-static-macos-x86_64\n\n# Check whether install was successful\n./bedder-static-macos-x86_64\n</code></pre> <p>Once again, if installation is successful, running the command \"bedder\" should display the subcommand help.</p> <pre><code>### macOS troubleshoot\n\nIf installation is unsuccessful, consider:\n\n#### Reinstalling in a python virtual environment\n</code></pre> <p>python -m venv venv source venv/bin/activate wget https://github.com/quinlan-lab/bedder-rs/releases/download/v0.1.6/bedder-static-macos-x86_64 chmod +x bedder-static-macos-x86_64</p> <pre><code>#### Calling the command from the current directory\n</code></pre> <p>./bedder-static-macos-x86_64</p> <pre><code>#### Relocating the binary to $PATH\n\nThis may be necessary if above check fails or if you are hoping to install the macOS binary in a particular location distinct from the default.\n</code></pre>"},{"location":"installation/#to-determine-what-path-are-available","title":"To determine what $PATH are available","text":"<p>echo \"$PATH\"</p>"},{"location":"installation/#move-to-path","title":"Move to $PATH","text":"<p>sudo mv bedder-static-macos-x86_64 /usr/local/bin/bedder</p> <p>```</p>"},{"location":"installation/#binary-information","title":"Binary Information","text":"<ul> <li>Linux binary: Fully static (~6MB, no dependencies)</li> <li>fully static when installing on a local machine</li> <li>testing has identified that as of June 2025, installation on a remote cluster may require the use of a python venv</li> <li>macOS binary: Mostly static (~6MB, minimal system dependencies)</li> <li>Python: Works with any Python 3.8+ system</li> <li>Architecture: x86_64</li> </ul>"},{"location":"intersections/","title":"Intersections","text":"aa.bed <pre>chr1 2 23</pre> bb.bed <pre>chr1 8 12\nchr1 14 15\nchr1 20 30</pre> <p>Here we show examples of how <code>bedder</code> can perform intersections. All examples uses these files (also shown to the right):</p>"},{"location":"intersections/#aabed","title":"aa.bed","text":"<pre><code>chr1 2 23\n</code></pre>"},{"location":"intersections/#bbbed","title":"bb.bed","text":"<pre><code>chr1 8 12\nchr1 14 15\nchr1 20 30\n</code></pre>"},{"location":"intersections/#reporting-piece","title":"Reporting Piece","text":"<p>For, now, we focus on which part of each interval that is reported. The options for this are:</p> <pre><code>  -p, --a-piece &lt;A_PIECE&gt;\n          a-piece [default: whole] [possible values: none, part, whole, inverse]\n      --b-piece &lt;B_PIECE&gt;\n          b-piece [default: whole] [possible values: none, part, whole, inverse]\n</code></pre> <p>Let's start with reporting the whole <code>a</code> interval if it overlaps and none of the <code>b</code> interval:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece whole --b-piece none\nchr1    2       23\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output1\n    chr1_2-23 :0, 21</code></pre> <p>Now, we report the parts of the <code>a</code> interval along with the whole <code>b</code> interval that it overlapped:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece part --b-piece whole\nchr1    8       12      chr1    8       12\nchr1    14      15      chr1    14      15\nchr1    20      23      chr1    20      30\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output2\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-23 :18, 21</code></pre> <p>And now the part of <code>a</code> and the <code>part</code> of <code>b</code>:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece part --b-piece part\nchr1    8       12      chr1    8       12\nchr1    14      15      chr1    14      15\nchr1    20      23      chr1    20      23\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output3\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-23 :18, 21</code></pre> <p>We can also report the <code>inverse</code>, that is, parts of <code>a</code> that do not overlap <code>b</code>:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece inverse --b-piece none\nchr1    2       8\nchr1    12      14\nchr1    15      20\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output4\n    chr1_2-8 :0, 6\n    chr1_12-14 :10, 12\n    chr1_15-20 :13, 18</code></pre> <p>There are other many combinations of parameters, some of which are not very helpful!</p>"},{"location":"intersections/#overlap-requirements","title":"Overlap Requirements","text":"<p>The default in bedder is that a single base of overlap is sufficient to report. However we can add constraints to this with these arguments:</p> <pre><code>  -r, --a-requirements &lt;A_REQUIREMENTS&gt;\n          a-requirements for overlap. A float value &lt; 1 or a number ending with % will be the fraction (or %) of the interval. An integer will be the number of bases. [default: 1]\n  -R, --b-requirements &lt;B_REQUIREMENTS&gt;\n          b-requirements for overlap. A float value &lt; 1 or a number ending with % will be the fraction (or %) of the interval. An integer will be the number of bases. [default: 1]\n</code></pre> <p>Here is the default, requiring a single base of overlap:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece part --b-piece none --a-requirements 1\nchr1    8       12\nchr1    14      15\nchr1    20      23\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output5\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-23 :18, 21</code></pre> <p>We can update that to require at least 3 bases:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece whole --b-piece whole --a-requirements 3 --a-mode piece\nchr1    2       23      chr1    8       12      chr1    20      30\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output6\n    chr1_2-23 :0, 21</code></pre> <p>We can also report each a piece:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece part --b-piece whole --b-requirements 3 --a-mode piece`\nchr1    8       12      chr1    8       12\nchr1    20      23      chr1    20      30\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output7\n    chr1_8-12 :6, 10\n    chr1_20-23 :18, 21</code></pre> <p>If we don't specify <code>--a-mode piece</code> then it checks across the entire interval so each part of <code>a</code> is reported even though one of the pieces is not 3 bases:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece part --b-piece whole --b-requirements 3`\nchr1    8       12      chr1    8       12\nchr1    14      15      chr1    14      15\nchr1    20      23      chr1    20      30\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output8\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-23 :18, 21</code></pre>"},{"location":"intersections/#python-functions","title":"Python functions","text":"<p>We can output custom columns with python functions. The python function must accept a fragment, part of an overlap, and have a return type of <code>str</code>, <code>int</code>, <code>bool</code> or <code>float</code>. The function must begin with <code>bedder_</code>. For example, we can have a function like this that will return the number of <code>b</code> intervals overlapping the <code>a</code> interval:</p> <pre><code>def bedder_n_overlapping(fragment) -&gt; int:\n    return len(fragment.b)\n</code></pre> <p>This tells <code>bedder</code> that the return type will be an integer. And the user will refer to the function as <code>py:n_overlapping</code> (without arguments).</p> <p>We put this in a file called <code>example.py</code> and then run with an argument of <code>-c py:n_overlapping</code> as:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece whole --b-piece part -P tests/examples/example.py -c 'py:n_overlapping'\nchr1    2       23      chr1    8       12      chr1    14      15      chr1    20      23      3\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output9\n    chr1_2-23 :0, 21</code></pre> <p>Where the final column shows the expected value of 3.</p> <p>Another example is that total bases of <code>b</code> that overlap an <code>a</code> interval:</p> <pre><code>def bedder_total_b_overlap(fragment) -&gt; int:\n    return sum(b.stop - b.start for b in fragment.b)\n</code></pre> <p>And call as:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece whole --b-piece part -P tests/examples/example.py -c 'py:total_b_overlap' \nchr1    2       23      chr1    8       12      chr1    14      15      chr1    20      23      8\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output10\n    chr1_2-23 :0, 21</code></pre> <p>Note that if we change the <code>--b-piece</code> to <code>whole</code> we get a different value as expected:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece whole --b-piece whole -P tests/examples/example.py -c 'py:total_b_overlap' \nchr1    2       23      chr1    8       12      chr1    14      15      chr1    20      30      15\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output11\n    chr1_2-23 :0, 21</code></pre> <p>and likewise if we change <code>--a-piece</code> to part:</p> <pre><code>$ bedder intersect -a tests/examples/aa.bed -b tests/examples/bb.bed -g tests/examples/fake.fai --a-piece part --b-piece whole -P tests/examples/example.py -c 'py:total_b_overlap'\nchr1    8       12      aaaa    chr1    8       12      4\nchr1    14      15      bbbb    chr1    14      15      1\nchr1    20      23      cccc    chr1    20      30      10\n</code></pre> <pre><code>%%{init: {'theme':'base', 'themeVariables': {'primaryTextColor': '#ffffff', 'tertiaryTextColor': '#ffffff', 'sectionBkgColor': '#ffffff', 'altSectionBkgColor': '#ffffff', 'gridColor': '#777777', 'section0': '#ffffff', 'section1': '#ffffff', 'section2': '#ffffff', 'section3': '#ffffff', 'taskTextColor': '#ffffff', 'altTaskTextColor': '#ffffff', 'textColor': '#ffffff'}}}%%\ngantt\n    dateFormat X\n    axisFormat %s\n\n    section aa\n    chr1_2-23 :0, 21\n    section bb\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-30 :18, 28\n    section output12\n    chr1_8-12 :6, 10\n    chr1_14-15 :12, 13\n    chr1_20-23 :18, 21</code></pre>"},{"location":"intersections/#vcf-and-getting-to-the-concrete-type","title":"VCF and getting to the concrete type","text":"<p>Until now, we have relied on the generic trait methods <code>chrom</code>, <code>start</code>, <code>stop</code> in the <code>python</code> functions, but we also have access to the concrete types. For example, if we know it's a vcf, we can access the underlying variant and only count the depth if the filter is pass:</p> <pre><code>def bedder_vcf_dp(fragment) -&gt; int:\n    \"\"\"return depth (DP) of passing variant\"\"\"\n    v = fragment.a.vcf() # get the concrete type\n    if v.filter != \"PASS\": return 0\n    dp = v.info(\"DP\") # this is list of length 1 so we return the first element\n    return dp[0]\n</code></pre>"}]}